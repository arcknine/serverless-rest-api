service: list-views-api
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  profile: ${opt:profile, 'default'}
  runtime: python2.7
  region: ${opt:region, 'ap-southeast-1'}
  stage: dev
  environment:
    IS_OFFLINE: "true"
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: list_views/create.create
    events:
      - http:
          path: list_views
          method: post
          cors: true

  get:
    handler: list_views/get.get
    events:
      - http:
          path: list_views/{list_view_section}
          method: get
          cors: true

resources:
  Resources:
    ListViewsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: appId_sectionId
            AttributeType: S
          -
            AttributeName: listingType_listingId
            AttributeType: S
        KeySchema:
          -
            AttributeName:  appId_sectionId
            KeyType: HASH
          -
            AttributeName: listingType_listingId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
